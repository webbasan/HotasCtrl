"Roadmap" - sort of...
======================

M1: Java Command Line Application for the X52[pro]
  - Goals:
    - "Get to know the territory"
    - Having tool to initially setup or change occasionally LED/Display settings
    - Initial setup of relevant project infrastructure: dependencies, build deploy, distribute

M2: "Daemon" mode (still Java based)
  - Missing Features:
    - "Marquee Effect" for long text?
    - "Date/Time" display: Host side update or missing "start trigger" on device side?
    - How to use countdown/stopwatch?
  - Goals:
    => Reduce latency when changing details
    => Allow callback from applications to change setup
    - Configuration files: different "Profiles", i.e. Application specific
    - IPC - How?:
      - ControllerMate can make HTTP-Requests -- UPDATE:
            not quite correct: ControllerMate delegates request to OS, that's why Safari gets called to do the job!
            => Recommendation: use/register custom "protocol" ("hotas://"? - how much "uniqueness" is required..?)
        => REST-like API (although "GET" based...),
           simple HTTP handling would be enough, no need for Servlet-Container
      - How does X-Plane handle it?
        (There is a similar App for X-Plane, but it interferes with the normal stick
         operation -- too much communication?)
      - Test: how much is too much? When does the stick get "hogged"?
      - What use for Oolite? FreeSpaceSCP?

M3: "Native" Command Line Application
  - Java has not enough friends...
  - Reduced latency
  - Potential "back-end" for PrefPane...
  - Evaluate "cross-platform" capability (=> USBlib?)

M4: PrefPane
  - Nice UI to setup the stick
  - "Profile"-Management
  - Start/Stop Daemon

M5: "Native" Daemon
  - Java not a requirement anymore
  - Evaluate suitability of other IPC approaches:
    - OS X: AppleScript Host?
      -> fitness compared to simple HTTP based approach?
    - StdIO
    - Named Pipe? Local Socket?
